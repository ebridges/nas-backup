#!/usr/bin/perl -w

use strict;
use warnings;

use Log::Log4perl qw(get_logger);
use POSIX qw{strftime};
use File::Path qw(make_path);

use constant OK => 'OK';
use constant ERROR => 'ERROR';

use constant LOGGING_CONFIG => 'etc/logging.cnf';
use constant EXCLUDE_FROM => 'etc/exclude.cnf';
use constant WEBHOOK => $ENV{SLACK_WEBHOOK};

Log::Log4perl->init(LOGGING_CONFIG);
my $LOG = get_logger();

my $config = shift;
my $source = shift;
my $dest = shift;
die_usage()
    unless $source and $dest and $config;

if (is_local($dest)) {
    make_path $dest
        if not -e $dest;
}

my $changelog = generate_changelog($config, $source, $dest);
$LOG->debug("($source => $dest) changelog has " . scalar(@$changelog) . " entries.");

if(scalar(@$changelog) > 0) {
    my $start = time;
    my $status = sync_folders($config, $source, $dest);
    my $elapsed = time - $start;
    $LOG->debug("sync completed.");
    send_changelog($config, $changelog, $status, $elapsed, $source, $dest);
} else {
    $LOG->info("skipping sync of $source since nothing has changed.");
}

#---------------

sub is_local {
    my $path = shift;
    return index($path, ':') < 0;
}


sub send_changelog {
    $LOG->info("sending changelog");
    my $config = shift;
    my $changelog = shift;
    my $status = shift;
    my $elapsed = shift;
    my $src = shift;
    my $des = shift;
    my $message;
    if ($status eq OK) {
       $message = format_success_message($des, $elapsed);
    } else {
       $message = format_error_message($config, $changelog, $status, $elapsed, $src, $des); 
    }
    send_message(WEBHOOK, $message);
}

sub format_success_message {
    $LOG->trace('formatting success message');
    my $destination = shift;
    my $elapsed_time = strftime("\%H:\%M:\%S", gmtime(shift()));
    my $timestamp = localtime(time);
    my $message = "[$timestamp] $destination completed successfully in $elapsed_time";
    my $body = qq^{"text":"$message"}^;
}

sub format_error_message {
    $LOG->trace('formatting message');
    my $config_file = shift;
    my $changelog = shift;
    my $status = shift;
    my $elapsed_time = strftime("\%H:\%M:\%S", gmtime(shift()));
    my $source_dir = shift;
    my $destination = shift;
    my $status_color = status_color($status);
    my $status_message = status_message($status);
    my $timestamp = time;
    my $file_count = scalar(@$changelog);
    my $log = join "\n", @$changelog;
    $log =~ s/"/\\"/g;
    $log =~ s/\n/\\n/g;

    my $body = qq^{
            "text": "*NAS backup completed $status_message.* <!everyone>",
            "attachments": [
                {
                    "title": "Result Summary",
                    "color": "$status_color",
                    "fields": [
                        {
                            "title": "Config",
                            "value": "$config_file",
                            "short": false
                        },
                        {
                            "title": "File Count",
                            "value": "$file_count",
                            "short": false
                        },
                        {
                            "title": "Source",
                            "value": "$source_dir",
                            "short": false
                        },
                        {
                            "title": "Destination",
                            "value": "$destination",
                            "short": false
                        },
                        {
                            "title": "Elapsed Time",
                            "value": "$elapsed_time",
                            "short": false
                        }
                    ]
                },
                {
                    "title": "Changelog ($file_count records)",
                    "color": "$status_color",
                    "text": "```$log```",
                    "mrkdwn_in": ["text"],
                    "footer": "nas-backup",
                    "ts": $timestamp
                }
            ]
        }^;

    return $body;
}


sub status_color {
    my $s = shift;
    return 'good'
        if $s eq OK;
    return 'danger';
}
        
sub status_message {
    my $s = shift;
    return 'successfully'
        if $s eq OK;
    return 'with errors';
}

sub generate_changelog {
    $LOG->trace("generating changelog");
    my $config = shift;
    my $source = shift;
    my $dest = shift;
    my $cmd = sprintf "rclone check '%s' '%s' --config %s --exclude-from %s --checksum --quiet 2>&1", $source, $dest, $config, EXCLUDE_FROM;
    $LOG->debug("check command: [$cmd]");
    my @log = `$cmd`;
    chomp @log;
    @log = grep { ! ($_ =~ /Failed to check/) } @log;
    return \@log;
}


sub sync_folders {
    my $config = shift;
    my $source = shift;
    my $dest = shift;
    my $cmd = sprintf "rclone sync '%s' '%s' --config %s --exclude-from %s --checksum --delete-excluded --verbose 2>&1", $source, $dest, $config, EXCLUDE_FROM;
    $LOG->debug("sync command: [$cmd]");
    my @log = `$cmd`;
    $LOG->info(@log);
    if ($?) {
        $LOG->error("Error when syncing [$source] to [$dest]: $?");
        return ERROR;
    }
    return OK;
}


sub send_message {
    my $webhook = shift;
    my $message = shift;

    my $cmd = sprintf "curl --silent -X POST -H 'Content-type: application/json' --data '%s' %s", $message, $webhook;
    my $result = `$cmd`;

    $LOG->info("send message result: ".$result);
}


sub die_usage {
    my $mesg = "Usage: $0 [config] [source] [destination]\n";
    die $mesg;
}


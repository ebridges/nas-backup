#!/usr/bin/perl -w

use strict;
use warnings;

use Log::Log4perl qw(get_logger);
use POSIX qw{strftime};

use constant OK => 'OK';
use constant ERROR => 'ERROR';

use constant LOGGING_CONFIG => 'etc/logging.cnf';
use constant EXCLUDE_FROM => 'etc/exclude.cnf';
use constant RCLONE_CONFIG => 'etc/rclone-config.cnf';
use constant MAIL_SUBJ => 'NAS Backup';
use constant MAIL_TO => $ENV{NAS_BACKUP_MAIL_TO};
use constant MAIL_FROM => $ENV{NAS_BACKUP_MAIL_FROM};

Log::Log4perl->init(LOGGING_CONFIG);
my $LOG = get_logger();

my $config = shift;
my $source = shift;
my $dest = shift;
die_usage()
    unless $source and $dest and $config;

my $changelog = generate_changelog($config, $source, $dest);
$LOG->debug("($source => $dest) changelog has " . scalar(@$changelog) . " entries.");

if(scalar(@$changelog) > 0) {
    my $start = time;
    my $status = sync_folders($config, $source, $dest);
    my $elapsed = time - $start;
    $LOG->debug("sync completed.");
    send_changelog($changelog, $status, $elapsed, $source, $dest);
} else {
    $LOG->info("skipping sync of $source since nothing has changed.");
}


sub send_changelog {
    $LOG->info("emailing changelog");
    my $changelog = shift;
    my $status = shift;
    my $elapsed = shift;
    my $src = shift;
    my $des = shift;
    my $message = format_message($changelog, $status, $elapsed, $src, $des);
    send_email(MAIL_TO, MAIL_FROM, MAIL_SUBJ, $message);
}


sub format_message {
    $LOG->trace('formatting message to <'. MAIL_TO . '>');
    my $changelog = shift;
    my $status = shift;
    my $elapsed = shift;
    my $src = shift;
    my $des = shift;
    my $color = status_color($status);
    my $cnt = scalar(@$changelog);
    my $log = join "\n", @$changelog;
    my $body = "<b>Status:</b> [<span style='color: $color'>$status</span>]<br/>\n";
    $body .= "<b>File count:</b> [$cnt]<br/>\n";
    $body .= "<b>Source:</b> [$src]<br/>\n";
    $body .= "<b>Destination:</b> [$des]<br/>\n";
    $body .= "<b>Elapsed Time:</b> [". strftime("\%H:\%M:\%S", gmtime($elapsed)) ."]<br/>\n";
    $body .= "<pre>\n$log</pre>\n";
    return $body;
}


sub status_color {
    my $s = shift;
    return 'green'
        if $s eq OK;
    return 'red';
}
        

sub generate_changelog {
    $LOG->trace("generating changelog");
    my $config = shift;
    my $source = shift;
    my $dest = shift;
    my $cmd = sprintf "rclone check '%s' '%s' --config %s --exclude-from %s --quiet 2>&1", $source, $dest, $config, EXCLUDE_FROM;
    $LOG->debug("check command: [$cmd]");
    my @log = `$cmd`;
    chomp @log;
    @log = grep { ! ($_ =~ /Failed to check/) } @log;
    return \@log;
}


sub sync_folders {
    my $config = shift;
    my $source = shift;
    my $dest = shift;
    my $cmd = sprintf "rclone sync '%s' '%s' --config %s --exclude-from %s --verbose 2>&1", $source, $dest, $config, EXCLUDE_FROM;
    $LOG->debug("sync command: [$cmd]");
    my @log = `$cmd`;
    $LOG->info(@log);
    if ($?) {
        $LOG->error("Error when syncing [$source] to [$dest]: $?");
        return ERROR;
    }
    return OK;
}


sub send_email {
    my $to = shift;
    my $from = shift;
    my $subject = shift;
    my $message = shift;
    open(MAIL, "|/usr/sbin/sendmail -t");
    # Email Header
    print MAIL "To: $to\n";
    print MAIL "From: $from\n";
    print MAIL "Content-Type: text/html\n";
    print MAIL "MIME-Version: 1.0\n";
    print MAIL "Subject: $subject\n\n";
    print MAIL $message;
    close(MAIL);
}


sub die_usage {
    my $mesg = "Usage: $0 [config] [source] [destination]\n";
    die $mesg;
}

